@page "/content"
@using MarketingMessages.Client.Services.HttpService
@using MarketingMessages.Shared.Models
@inject ContentService _contentService
@inject IToastService _toast
@inject IJSRuntime _js
@* @implements IAsyncDisposable *@

<PageTitle>Content</PageTitle>
<div class="container-md">
    <p class=" mt-5 p-3 fw-medium fs-14 rounded rounded-2 w-100 bg-200">
        Create email content or edit previously saved work by selecting from
        &nbsp; 
        <a class="link link-primary fw-bolder" data-bs-toggle="modal" data-bs-target="#choose-content-modal"> your content</a>
    </p>
    <HTML @ref="_editorRef" Class=" mx-lg-auto mt-md-3" SaveClicked="SaveContentAsync" @bind-Model="Model" />

</div>

<Modal HeaderClass="bg-200" BodyClass="bg-100" Class="rounded rounded-1" Id="choose-content-modal">
    <ModalHeader>
        <h3 class="text-700  mb-0">Select a Template</h3>
    </ModalHeader>
    <ModalTitle>
        <div class="px-3">
            <div class="d-flex vs-3 bg-200 align-items-center w-100 px-3 mb-3">
                <a class="link link-600 me-auto fs-16 fw-bolder ms-3" @onclick="SelectPrevious">
                    <i class="fa fa-chevron-left me-2"></i>
                    Back
                </a>
                <div class="mx-auto col">
                    <div class="d-flex align-content-end justify-content-evenly w-100">
                        @for (int i = 0; i < UserContent.Count; i++)
                        {
                            int index = i;
                            <div class="col-auto">
                                @if (Previewing is not null && UserContent.IndexOf(Previewing) == i)
                                {
                                    <i class="fa fa-dot-circle text-600"></i>
                                }
                                else
                                {
                                    <a class="link link-500" @key="@index" @onclick="(() => SetPreviewing(index))">
                                        <i class="fa fa-dot-circle text-500"></i>
                                    </a>

                                }
                            </div>
                        }
                    </div>
                </div>
                <a class="link link-600 ms-auto me-3 fs-16 fw-bolder" @onclick="SelectNext">
                    Next
                    <i class="fa fa-chevron-right ms-2"></i>
                </a>
            </div>
        </div>
        <div class="d-flex">
            <h4 class="text-600 reddit-sans-550 ms-3">@Previewing?.DocumentTitle</h4>
            <a class="link link-danger ms-auto me-3" @onclick="DeleteContent">
                Delete this content
            </a>
        </div>

    </ModalTitle>
    <ModalBody>

        <div class="d-flex w-100 max-h-45 vs-35 px-3">
            <div class="d-flex flex-column mx-auto border border-1 border-700 shadow-sm w-100 h-100 overflow-y-auto">
                <div class="w-100 h-100 mx-auto p-2">
                    @((MarkupString)(Previewing?.HtmlContent ?? ""))
                </div>
                @if (String.IsNullOrEmpty(Previewing?.HtmlContent))
                {

                    <div class="w-100 h-100 mx-auto p-2">
                        <h5 class="mx-auto text-center mt-5">No Content</h5>
                    </div>
                }
            </div>
        </div>
        <div class="d-flex mt-3 px-3">
            <div class="col">
                <button data-bs-dismiss="modal" class="btn btn-600 w-100 fs-16 reddit-sans-550 " @onclick="SelectEditorContent">
                    Select
                </button>
            </div>
        </div>
    </ModalBody>
</Modal>

@code {
    bool _editName;
    bool _collapse;

    int _contentIndex;
    HTML _editorRef = new();

    List<string> _ignore = [
        "ContactId",
        "Profession2",
        "Custom",
        "Custom1",
        "Custom2",
        "CreatedOn",
        "CreatedBy",
        "ModifiedBy",
        "ModifiedOn"
    ];

    public HtmlEditorContent Model { get; set; } = new();

    public List<HtmlEditorContent> UserContent { get; set; } = [];

    public HtmlEditorContent? Previewing { get; set; }

    public bool EditorIsReady { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var contentResponse = await _contentService.GetUserContentAsync();
        UserContent = contentResponse.Select(c => new HtmlEditorContent()
        {
            ContentId = c.ContentId,
            DocumentTitle = c.Name,
            HtmlContent = c.HtmlContent,
            Images = c.Images,
            TextContent = c.TextContent
        }).ToList();
        Previewing = UserContent.FirstOrDefault();
        await InvokeAsync(StateHasChanged);
        await base.OnInitializedAsync();
    }
    private async Task SelectNext(MouseEventArgs args)
    {
        _contentIndex += 1;
        _contentIndex %= UserContent.Count;
        Previewing = UserContent[_contentIndex];
        await InvokeAsync(StateHasChanged);
    }
    private async Task SelectPrevious(MouseEventArgs args)
    {
        _contentIndex -= 1;
        if (_contentIndex < 0)
            _contentIndex = UserContent.Count - 1;
        Previewing = UserContent[_contentIndex];
        await InvokeAsync(StateHasChanged);
    }
    private async Task SelectEditorContent(MouseEventArgs args)
    {
        if (Previewing is null)
            return;
        // _contentIndex = UserContent.IndexOf(Previewing);
        // Model = UserContent[_contentIndex];
        Model = Previewing;
        if (_editorRef is null)
            _editorRef = new();
        await _editorRef.SetHtmlContentAsync(Model);

        await InvokeAsync(StateHasChanged);
    }
    private async Task SetPreviewing(int index)
    {
        Previewing = UserContent[index];
        await InvokeAsync(StateHasChanged);
    }
    private async Task DeleteContent(MouseEventArgs args)
    {
        if (Previewing is null)
        {
            return;
        }

        string confirmMessage = $"Are you sure you want to delete this content: {Previewing.DocumentTitle} ?";
        var confirm = await _js.InvokeAsync<bool>("confirm", confirmMessage);
        if (!confirm) return;
        var response = await _contentService.DeleteEmailContentAsync(Previewing.ContentId);
        if (response.Success)
        {
            // await _contentModal.Hide();
            UserContent.Remove(Previewing);
            Previewing = UserContent.FirstOrDefault();
            _toast.Success("Successfully deleted email content");
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task SaveContentAsync()
    {
        if (_editorRef is null) return;
        Model.HtmlContent = await _editorRef.GetContent();
        var response = await _contentService.SaveContentAsync(Model);
        if (response.Success)
        {
            _toast.Success("Successfully saved content.");
            await _js.InvokeVoidAsync("wysiwyg.didSave");
        }
    }

    // public async ValueTask DisposeAsync()
    // {
    //     if(_editorRef is not null)
    //         await _editorRef.DisposeAsync();
    //     _editorRef = null;
    //     GC.SuppressFinalize(this);
    // }

    private async Task UpdateContentAsync()
    {
        if (_editorRef is null) _editorRef = new();
        Model.HtmlContent = await _editorRef.GetContent();
        var response = await _contentService.UpdateContentAsync(Model);
        if (response.Success)
        {
            _toast.Success("Successfully updated content.");

        }
    }
}
